{"version":3,"file":"ted-crushinator-helpers.cjs.production.min.js","sources":["../src/lib/preppers.ts","../src/lib/log.ts","../src/lib/defaultify.ts","../src/lib/query-string.ts","../src/index.ts","../src/lib/parameterize.ts","../src/lib/dehyphenate.ts","../src/lib/crop-option.ts","../src/lib/fit-option.ts","../src/lib/unsharp-option.ts"],"sourcesContent":["/**\n * Methods used to prepare Crushinator option values for parameterization,\n * mostly concerning typecasting and type-checking with application of\n * default values.\n */\n\nimport { error } from './log';\n\n/**\n * Returns true if the value is undefined, null, or false.\n * @param value - Value to test for emptiness.\n */\nexport function isBlank(value: any): boolean {\n  return typeof value === 'undefined' || value === null || value === false;\n}\n\n/**\n * Prepare a boolean value.\n *\n * @param value - Value that should be typecast as a boolean.\n */\nexport function prepBoolean(\n  value: any,\n  defaultValue: boolean = false,\n): boolean {\n  return typeof value === 'undefined' ? defaultValue : !!value;\n}\n\n/**\n * Prepare a numerical value.\n * @param value - Value that should be typecast as a number.\n * @returns the resulting number\n */\nexport function prepNumber(value: any, defaultValue: number = 0): number {\n  let outgoing = value;\n\n  // Boolean true evaluates to 1 numerically\n  if (value === true) {\n    outgoing = defaultValue || 1;\n  }\n\n  if (isBlank(value)) {\n    outgoing = defaultValue;\n  }\n\n  // Cast values numerically\n  outgoing = Number(outgoing);\n\n  if (!Number.isFinite(outgoing)) {\n    error(`\"${value}\" is not a finite number`);\n    outgoing = defaultValue;\n  }\n\n  return outgoing;\n}\n","/* eslint-disable import/prefer-default-export */\n/**\n * Wrapper methods for logging errors and other notices.\n */\n\n/**\n * Throw an honest-to-goodness error.\n * @param message - A human-readable description of the error\n */\nexport function error(message: string): void {\n  throw new Error(message);\n}\n/* eslint-enable import/prefer-default-export */\n","/**\nAdd defaults to a Crushinator helper options object,\nunless explicitly requested not to do so.\n*/\n\nimport { prepBoolean } from './preppers';\nimport { CrushConfig } from './crush-config';\n\n/**\n * Default Crushinator helper options.\n */\nconst defaultOptions = {\n  fit: true,\n  unsharp: true,\n  quality: 82,\n};\n\n/**\n * Given a list of options returns those options seeded with the defaults\n * specified above unless the \"defaults\" option is set to false.\n\n * @param options - Incoming Crushinator helper options.\n */\nexport function defaultify(\n  options: CrushConfig = { defaults: true },\n): CrushConfig {\n  return Object.assign(\n    {},\n    prepBoolean(options.defaults, true) ? defaultOptions : {},\n    options,\n  );\n}\n\nexport default defaultify;\n","/**\nQuery string helper methods.\n*/\n\n/**\n * Encode value for use in a URL.\n */\nexport function encode(value: string): string {\n  return encodeURIComponent(value);\n}\n\n/**\n * Simple serialization of an object to query parameters.\n */\nexport function serialize(\n  params: Record<string, any>,\n  prefix?: string,\n): string {\n  const parts: Array<any> = [];\n\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    const param = prefix ? `${prefix}[${key}]` : key;\n\n    parts.push(\n      typeof value === 'object'\n        ? serialize(value, param)\n        : `${encode(param)}=${encode(value)}`,\n    );\n  });\n\n  return parts.join('&');\n}\n\nexport default undefined;\n","/**\nCrushinator Helpers\nLibrary of simple JS methods to produce crushed image URLs.\nhttp://github.com/tedconf/js-crushinator-helpers\n*/\n\nimport { defaultify } from './lib/defaultify';\nimport { parameterize } from './lib/parameterize';\nimport { serialize } from './lib/query-string';\nimport { CrushConfig } from './lib/crush-config';\n\n/**\nA whitelist: Crushinator is capable of optimizing images hosted on\nany of these domains.\n*/\nexport const imageHosts = [\n  'assets.tedcdn.com',\n  'assets2.tedcdn.com',\n  'ems.ted.com',\n  'ems-staging.ted.com',\n  'images.ted.com',\n  'pa.tedcdn.com',\n  'pb-assets.tedcdn.com',\n  'pe.tedcdn.com',\n  'pf.tedcdn.com',\n  'ph.tedcdn.com',\n  'pj.tedcdn.com',\n  'pk.tedcdn.com',\n  'pl.tedcdn.com',\n  's3.amazonaws.com',\n  's3-us-west-2.amazonaws.com',\n  'staging.ted.com',\n  'storage.ted.com',\n  'talkstar-photos.s3.amazonaws.com',\n  'tedcdnpa-a.akamaihd.net',\n  'tedcdnpe-a.akamaihd.net',\n  'tedcdnpf-a.akamaihd.net',\n  'tedconfblog.files.wordpress.com',\n  'tedideas.files.wordpress.com',\n  'tedlive.ted.com',\n  'tedlive-staging.ted.com',\n  'ted2017.ted.com',\n  'ted2017-staging.ted.com',\n  'www.filepicker.io',\n  'www.ted.com',\n];\n\n/**\nGlobal configuration options. These can be overridden at the library\nlevel or via the options object by individual helper method calls.\n*/\nexport const config = {\n  defaults: true,\n  host: 'https://pi.tedcdn.com',\n};\n\n/**\n * Returns the portion of input URL that corresponds to the host name.\n *\n * @param url - the url of the image to be crushed\n * @returns The crushed URL\n */\nfunction extractHost(url: string): string {\n  return String(url).replace(/.*\\/\\/([^/]+).*/, '$1');\n}\n\n/**\n * Check to see if a URL passes Crushinator's host whitelist.\n * @param url - URL of image to check.\n * @returns is the url whitelisted?\n */\nexport function crushable(url: string): boolean {\n  return imageHosts.indexOf(extractHost(url)) !== -1;\n}\n\n/**\n * Restore a previously crushed URL to its original form.\n *\n * @param url - Previously optimized image URL.\n * @returns the original url\n */\nexport function uncrush(url: string): string {\n  const parts = String(url).match(\n    /(.+)?\\/\\/(?:(?:img(?:-ssl)?|pi)\\.tedcdn\\.com|tedcdnpi-a\\.akamaihd\\.net)\\/r\\/([^?]+)/,\n  );\n\n  // Avoid double-crushing images\n  if (parts) {\n    return uncrush(`${parts[1]}//${parts[2]}`);\n  }\n\n  return url;\n}\n\n/**\n * Returns a Crushinator-optimized version of an image URL, using options\n * specified in a Plain Old JavaScript Object:\n * ```\n *  crush('http://images.ted.com/image.jpg', { width: 320 })\n *    => 'https://pi.tedcdn.com/images.ted.com/image.jpg?w=320'\n * ```\n * @remarks If the input URL cannot be optimized (does not pass the whitelist) it is returned untampered, making this method safe to use for dynamic image sources.\n * @param url - URL of image to be optimized.\n * @param options - Crushinator Config\n * @returns crushed image URL\n */\nexport function crush(url: string, options: CrushConfig = {}): string {\n  // Avoid double-crushing images\n  const uncrushed = uncrush(url);\n\n  // Apply host whitelist\n  if (!crushable(uncrushed)) {\n    return uncrushed;\n  }\n\n  const params = serialize(\n    parameterize(\n      defaultify(Object.assign({ defaults: config.defaults }, options)),\n    ),\n  );\n\n  return `${config.host}/r/${uncrushed.replace(/.*\\/\\//, '')}${\n    params ? `?${params}` : ''\n  }`;\n}\n\nexport default crush;\n","/**\n * Convert helper options to Crushinator URL parameters.\n */\n\nimport * as crop from './crop-option';\nimport { fit } from './fit-option';\nimport { unsharp } from './unsharp-option';\nimport { dehyphenate } from './dehyphenate';\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function parameterize(incoming: CrushConfig): any {\n  const params: any = {};\n  const options: any = dehyphenate(incoming);\n\n  Object.keys(options).forEach(option => {\n    const value: any = options[option];\n\n    switch (option) {\n      case 'width':\n        params.w = prepNumber(value);\n        break;\n\n      case 'height':\n        params.h = prepNumber(value);\n        break;\n\n      case 'quality':\n        params.quality = prepNumber(value);\n        break;\n\n      case 'fit':\n        Object.assign(params, fit(options));\n        break;\n\n      case 'align':\n        params.gravity =\n          // @ts-ignore\n          {\n            top: 'n',\n            left: 'w',\n            center: 'c',\n            middle: 'c',\n            right: 'e',\n            bottom: 's',\n          }[value] || 'c';\n        break;\n\n      case 'crop':\n        params[crop.param(value)] = crop.filter(value);\n        break;\n\n      case 'blur':\n        params.blur =\n          typeof value === 'object'\n            ? `${prepNumber(value.radius)},${prepNumber(value.sigma, 2)}`\n            : `0,${prepNumber(value, 2)}`;\n        break;\n\n      case 'gamma':\n        params.gamma =\n          typeof value === 'object'\n            ? `${prepNumber(value.red, 1)},${prepNumber(\n                value.green,\n                1,\n              )},${prepNumber(value.blue, 1)}`\n            : prepNumber(value, 1);\n        break;\n\n      case 'grayscale':\n      case 'greyscale':\n        params.grayscale = prepNumber(value, 1) * 100;\n        break;\n\n      case 'unsharp':\n        Object.assign(params, unsharp(options));\n        break;\n\n      case 'query':\n        Object.assign(params, value || {});\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return params;\n}\n\nexport default parameterize;\n","/**\n * Convert values from hyphenated form to an object tree, e.g.:\n * ```\n * dehyphenate({\n *   'cat-ears': 'pointy',\n *   'cat-tail': 'whippy',\n *   'dog-ears': 'floppy',\n *   'dog-tail': 'swishy',\n * })\n * // => {\n * //      cat: { ears: 'pointy', tail: 'whippy' },\n * //      dog: { ears: 'floppy', 'tail: 'swishy' },\n * //    }\n * ```\n */\nimport { CrushConfig } from './crush-config';\n\nexport function dehyphenate(values: CrushConfig): Record<any, any> {\n  const dehyphenated = {};\n\n  Object.keys(values).forEach((key: any) => {\n    // @ts-ignore\n    const value: any = values[key];\n    const splitted = key.match(/([^-]+)-+(.*)/);\n\n    if (splitted) {\n      // @ts-ignore\n      dehyphenated[splitted[1]] = dehyphenated[splitted[1]] || {};\n      // @ts-ignore\n      dehyphenated[splitted[1]][splitted[2]] = value;\n    } else {\n      // @ts-ignore\n      dehyphenated[key] = value;\n    }\n  });\n\n  return dehyphenated;\n}\n\nexport default dehyphenate;\n","/**\nGiven an options object, returns a parameters object with crop\nparameters included according to the specified options.\n*/\n\nimport { prepNumber } from './preppers';\n\n/*\n * @param width - Width of cropped section in pixels.\n * @param height - Height of cropped section in pixels.\n * @param x - Coordinate at which to start crop (pixels from left.)\n * @param y - Coordinate at which to start crop (pixels from top.)\n * @param afterResize - If true, crop will take place after the image has been resized.\n */\nexport type CropOptions = Partial<{\n  afterResize: boolean;\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}>;\n\nexport function param(cropOptions: CropOptions): string {\n  return cropOptions.afterResize ? 'c' : 'precrop';\n}\n\nexport function filter(cropOptions: CropOptions): string {\n  const data = [];\n\n  data.push(prepNumber(cropOptions.width));\n  data.push(prepNumber(cropOptions.height));\n\n  if (\n    Object.prototype.hasOwnProperty.call(cropOptions, 'x') ||\n    Object.prototype.hasOwnProperty.call(cropOptions, 'y')\n  ) {\n    data.push(prepNumber(cropOptions.x));\n    data.push(prepNumber(cropOptions.y));\n  }\n\n  return data.join(',');\n}\n","/**\n * Given an options object, returns the parameters required to\n * resize the image for best fit if applicable.\n */\n\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function fit(options: CrushConfig): any {\n  const params: any = {};\n\n  if (options.fit && options.width && options.height) {\n    Object.assign(params, {\n      op: '^',\n      c: `${prepNumber(options.width)},${prepNumber(options.height)}`,\n    });\n\n    // A custom alignment may be specified with the fit option\n    if (!options.align) params.gravity = 't';\n  }\n\n  return params;\n}\n\nexport default fit;\n","/**\nGiven an options object, returns a parameters object with unsharp\nparameters included according to the specified options.\n*/\n\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function unsharp(options: CrushConfig): any {\n  const params = {};\n  const value: any = options.unsharp;\n\n  if (value) {\n    Object.assign(params, {\n      u: {\n        r: prepNumber(value?.radius, 2),\n        s: prepNumber(value?.sigma, 0.5),\n        a: prepNumber(value?.amount, 0.8),\n        t: prepNumber(value?.threshold, 0.03),\n      },\n    });\n  }\n\n  return params;\n}\n\nexport default unsharp;\n"],"names":["prepNumber","value","defaultValue","outgoing","isBlank","Number","isFinite","message","Error","error","defaultOptions","fit","unsharp","quality","encode","encodeURIComponent","imageHosts","config","defaults","host","crushable","url","indexOf","String","replace","extractHost","uncrush","parts","match","crush","options","uncrushed","params","serialize","prefix","Object","keys","forEach","key","param","push","join","incoming","values","dehyphenated","splitted","option","cropOptions","w","h","assign","width","height","op","c","align","gravity","top","left","center","middle","right","bottom","afterResize","data","prototype","hasOwnProperty","call","x","y","crop","blur","radius","sigma","gamma","red","green","blue","grayscale","u","r","s","a","amount","t","threshold","parameterize","defaultify"],"mappings":"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"}