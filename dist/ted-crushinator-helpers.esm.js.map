{"version":3,"file":"ted-crushinator-helpers.esm.js","sources":["../src/lib/log.ts","../src/lib/preppers.ts","../src/lib/defaultify.ts","../src/lib/crop-option.ts","../src/lib/fit-option.ts","../src/lib/unsharp-option.ts","../src/lib/dehyphenate.ts","../src/lib/parameterize.ts","../src/lib/query-string.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\n/**\n * Wrapper methods for logging errors and other notices.\n */\n\n/**\n * Throw an honest-to-goodness error.\n * @param message - A human-readable description of the error\n */\nexport function error(message: string): void {\n  throw new Error(message);\n}\n/* eslint-enable import/prefer-default-export */\n","/**\n * Methods used to prepare Crushinator option values for parameterization,\n * mostly concerning typecasting and type-checking with application of\n * default values.\n */\n\nimport { error } from './log';\n\n/**\n * Returns true if the value is undefined, null, or false.\n * @param value - Value to test for emptiness.\n */\nexport function isBlank(value: any): boolean {\n  return typeof value === 'undefined' || value === null || value === false;\n}\n\n/**\n * Prepare a boolean value.\n *\n * @param value - Value that should be typecast as a boolean.\n */\nexport function prepBoolean(\n  value: any,\n  defaultValue: boolean = false,\n): boolean {\n  return typeof value === 'undefined' ? defaultValue : !!value;\n}\n\n/**\n * Prepare a numerical value.\n * @param value - Value that should be typecast as a number.\n * @returns the resulting number\n */\nexport function prepNumber(value: any, defaultValue: number = 0): number {\n  let outgoing = value;\n\n  // Boolean true evaluates to 1 numerically\n  if (value === true) {\n    outgoing = defaultValue || 1;\n  }\n\n  if (isBlank(value)) {\n    outgoing = defaultValue;\n  }\n\n  // Cast values numerically\n  outgoing = Number(outgoing);\n\n  if (!Number.isFinite(outgoing)) {\n    error(`\"${value}\" is not a finite number`);\n    outgoing = defaultValue;\n  }\n\n  return outgoing;\n}\n","/**\nAdd defaults to a Crushinator helper options object,\nunless explicitly requested not to do so.\n*/\n\nimport { prepBoolean } from './preppers';\nimport { CrushConfig } from './crush-config';\n\n/**\n * Default Crushinator helper options.\n */\nconst defaultOptions = {\n  fit: true,\n  unsharp: true,\n  quality: 82,\n};\n\n/**\n * Given a list of options returns those options seeded with the defaults\n * specified above unless the \"defaults\" option is set to false.\n\n * @param options - Incoming Crushinator helper options.\n */\nexport function defaultify(\n  options: CrushConfig = { defaults: true },\n): CrushConfig {\n  return Object.assign(\n    {},\n    prepBoolean(options.defaults, true) ? defaultOptions : {},\n    options,\n  );\n}\n\nexport default defaultify;\n","/**\nGiven an options object, returns a parameters object with crop\nparameters included according to the specified options.\n*/\n\nimport { prepNumber } from './preppers';\n\n/*\n * @param width - Width of cropped section in pixels.\n * @param height - Height of cropped section in pixels.\n * @param x - Coordinate at which to start crop (pixels from left.)\n * @param y - Coordinate at which to start crop (pixels from top.)\n * @param afterResize - If true, crop will take place after the image has been resized.\n */\nexport type CropOptions = Partial<{\n  afterResize: boolean;\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}>;\n\nexport function param(cropOptions: CropOptions): string {\n  return cropOptions.afterResize ? 'c' : 'precrop';\n}\n\nexport function filter(cropOptions: CropOptions): string {\n  const data = [];\n\n  data.push(prepNumber(cropOptions.width));\n  data.push(prepNumber(cropOptions.height));\n\n  if (\n    Object.prototype.hasOwnProperty.call(cropOptions, 'x') ||\n    Object.prototype.hasOwnProperty.call(cropOptions, 'y')\n  ) {\n    data.push(prepNumber(cropOptions.x));\n    data.push(prepNumber(cropOptions.y));\n  }\n\n  return data.join(',');\n}\n","/**\n * Given an options object, returns the parameters required to\n * resize the image for best fit if applicable.\n */\n\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function fit(options: CrushConfig): any {\n  const params: any = {};\n\n  if (options.fit && options.width && options.height) {\n    Object.assign(params, {\n      op: '^',\n      c: `${prepNumber(options.width)},${prepNumber(options.height)}`,\n    });\n\n    // A custom alignment may be specified with the fit option\n    if (!options.align) params.gravity = 't';\n  }\n\n  return params;\n}\n\nexport default fit;\n","/**\nGiven an options object, returns a parameters object with unsharp\nparameters included according to the specified options.\n*/\n\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function unsharp(options: CrushConfig): any {\n  const params = {};\n  const value: any = options.unsharp;\n\n  if (value) {\n    Object.assign(params, {\n      u: {\n        r: prepNumber(value?.radius, 2),\n        s: prepNumber(value?.sigma, 0.5),\n        a: prepNumber(value?.amount, 0.8),\n        t: prepNumber(value?.threshold, 0.03),\n      },\n    });\n  }\n\n  return params;\n}\n\nexport default unsharp;\n","/**\n * Convert values from hyphenated form to an object tree, e.g.:\n * ```\n * dehyphenate({\n *   'cat-ears': 'pointy',\n *   'cat-tail': 'whippy',\n *   'dog-ears': 'floppy',\n *   'dog-tail': 'swishy',\n * })\n * // => {\n * //      cat: { ears: 'pointy', tail: 'whippy' },\n * //      dog: { ears: 'floppy', 'tail: 'swishy' },\n * //    }\n * ```\n */\nimport { CrushConfig } from './crush-config';\n\nexport function dehyphenate(values: CrushConfig): Record<any, any> {\n  const dehyphenated = {};\n\n  Object.keys(values).forEach((key: any) => {\n    // @ts-ignore\n    const value: any = values[key];\n    const splitted = key.match(/([^-]+)-+(.*)/);\n\n    if (splitted) {\n      // @ts-ignore\n      dehyphenated[splitted[1]] = dehyphenated[splitted[1]] || {};\n      // @ts-ignore\n      dehyphenated[splitted[1]][splitted[2]] = value;\n    } else {\n      // @ts-ignore\n      dehyphenated[key] = value;\n    }\n  });\n\n  return dehyphenated;\n}\n\nexport default dehyphenate;\n","/**\n * Convert helper options to Crushinator URL parameters.\n */\n\nimport * as crop from './crop-option';\nimport { fit } from './fit-option';\nimport { unsharp } from './unsharp-option';\nimport { dehyphenate } from './dehyphenate';\nimport { prepNumber } from './preppers';\nimport { CrushConfig } from './crush-config';\n\nexport function parameterize(incoming: CrushConfig): any {\n  const params: any = {};\n  const options: any = dehyphenate(incoming);\n\n  Object.keys(options).forEach(option => {\n    const value: any = options[option];\n\n    switch (option) {\n      case 'width':\n        params.w = prepNumber(value);\n        break;\n\n      case 'height':\n        params.h = prepNumber(value);\n        break;\n\n      case 'quality':\n        params.quality = prepNumber(value);\n        break;\n\n      case 'fit':\n        Object.assign(params, fit(options));\n        break;\n\n      case 'align':\n        params.gravity =\n          // @ts-ignore\n          {\n            top: 'n',\n            left: 'w',\n            center: 'c',\n            middle: 'c',\n            right: 'e',\n            bottom: 's',\n          }[value] || 'c';\n        break;\n\n      case 'crop':\n        params[crop.param(value)] = crop.filter(value);\n        break;\n\n      case 'blur':\n        params.blur =\n          typeof value === 'object'\n            ? `${prepNumber(value.radius)},${prepNumber(value.sigma, 2)}`\n            : `0,${prepNumber(value, 2)}`;\n        break;\n\n      case 'gamma':\n        params.gamma =\n          typeof value === 'object'\n            ? `${prepNumber(value.red, 1)},${prepNumber(\n                value.green,\n                1,\n              )},${prepNumber(value.blue, 1)}`\n            : prepNumber(value, 1);\n        break;\n\n      case 'grayscale':\n      case 'greyscale':\n        params.grayscale = prepNumber(value, 1) * 100;\n        break;\n\n      case 'unsharp':\n        Object.assign(params, unsharp(options));\n        break;\n\n      case 'query':\n        Object.assign(params, value || {});\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return params;\n}\n\nexport default parameterize;\n","/**\nQuery string helper methods.\n*/\n\n/**\n * Encode value for use in a URL.\n */\nexport function encode(value: string): string {\n  return encodeURIComponent(value);\n}\n\n/**\n * Simple serialization of an object to query parameters.\n */\nexport function serialize(\n  params: Record<string, any>,\n  prefix?: string,\n): string {\n  const parts: Array<any> = [];\n\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    const param = prefix ? `${prefix}[${key}]` : key;\n\n    parts.push(\n      typeof value === 'object'\n        ? serialize(value, param)\n        : `${encode(param)}=${encode(value)}`,\n    );\n  });\n\n  return parts.join('&');\n}\n\nexport default undefined;\n","/**\nCrushinator Helpers\nLibrary of simple JS methods to produce crushed image URLs.\nhttp://github.com/tedconf/js-crushinator-helpers\n*/\n\nimport { defaultify } from './lib/defaultify';\nimport { parameterize } from './lib/parameterize';\nimport { serialize } from './lib/query-string';\nimport { CrushConfig } from './lib/crush-config';\n\n/**\nA whitelist: Crushinator is capable of optimizing images hosted on\nany of these domains.\n*/\nexport const imageHosts = [\n  'assets.tedcdn.com',\n  'assets2.tedcdn.com',\n  'ems.ted.com',\n  'ems-staging.ted.com',\n  'images.ted.com',\n  'pa.tedcdn.com',\n  'pb-assets.tedcdn.com',\n  'pe.tedcdn.com',\n  'pf.tedcdn.com',\n  'ph.tedcdn.com',\n  'pj.tedcdn.com',\n  'pk.tedcdn.com',\n  'pl.tedcdn.com',\n  's3.amazonaws.com',\n  's3-us-west-2.amazonaws.com',\n  'staging.ted.com',\n  'storage.ted.com',\n  'talkstar-photos.s3.amazonaws.com',\n  'tedcdnpa-a.akamaihd.net',\n  'tedcdnpe-a.akamaihd.net',\n  'tedcdnpf-a.akamaihd.net',\n  'tedconfblog.files.wordpress.com',\n  'tedideas.files.wordpress.com',\n  'tedlive.ted.com',\n  'tedlive-staging.ted.com',\n  'ted2017.ted.com',\n  'ted2017-staging.ted.com',\n  'www.filepicker.io',\n  'www.ted.com',\n];\n\n/**\nGlobal configuration options. These can be overridden at the library\nlevel or via the options object by individual helper method calls.\n*/\nexport const config = {\n  defaults: true,\n  host: 'https://pi.tedcdn.com',\n};\n\n/**\n * Returns the portion of input URL that corresponds to the host name.\n *\n * @param url - the url of the image to be crushed\n * @returns The crushed URL\n */\nfunction extractHost(url: string): string {\n  return String(url).replace(/.*\\/\\/([^/]+).*/, '$1');\n}\n\n/**\n * Check to see if a URL passes Crushinator's host whitelist.\n * @param url - URL of image to check.\n * @returns is the url whitelisted?\n */\nexport function crushable(url: string): boolean {\n  return imageHosts.indexOf(extractHost(url)) !== -1;\n}\n\n/**\n * Restore a previously crushed URL to its original form.\n *\n * @param url - Previously optimized image URL.\n * @returns the original url\n */\nexport function uncrush(url: string): string {\n  const parts = String(url).match(\n    /(.+)?\\/\\/(?:(?:img(?:-ssl)?|pi)\\.tedcdn\\.com|tedcdnpi-a\\.akamaihd\\.net)\\/r\\/([^?]+)/,\n  );\n\n  // Avoid double-crushing images\n  if (parts) {\n    return uncrush(`${parts[1]}//${parts[2]}`);\n  }\n\n  return url;\n}\n\n/**\n * Returns a Crushinator-optimized version of an image URL, using options\n * specified in a Plain Old JavaScript Object:\n * ```\n *  crush('http://images.ted.com/image.jpg', { width: 320 })\n *    => 'https://pi.tedcdn.com/images.ted.com/image.jpg?w=320'\n * ```\n * @remarks If the input URL cannot be optimized (does not pass the whitelist) it is returned untampered, making this method safe to use for dynamic image sources.\n * @param url - URL of image to be optimized.\n * @param options - Crushinator Config\n * @returns crushed image URL\n */\nexport function crush(url: string, options: CrushConfig = {}): string {\n  // Avoid double-crushing images\n  const uncrushed = uncrush(url);\n\n  // Apply host whitelist\n  if (!crushable(uncrushed)) {\n    return uncrushed;\n  }\n\n  const params = serialize(\n    parameterize(\n      defaultify(Object.assign({ defaults: config.defaults }, options)),\n    ),\n  );\n\n  return `${config.host}/r/${uncrushed.replace(/.*\\/\\//, '')}${\n    params ? `?${params}` : ''\n  }`;\n}\n\nexport default crush;\n"],"names":["error","message","Error","isBlank","value","prepBoolean","defaultValue","prepNumber","outgoing","Number","isFinite","defaultOptions","fit","unsharp","quality","defaultify","options","defaults","Object","assign","param","cropOptions","afterResize","filter","data","push","width","height","prototype","hasOwnProperty","call","x","y","join","params","op","c","align","gravity","u","r","radius","s","sigma","a","amount","t","threshold","dehyphenate","values","dehyphenated","keys","forEach","key","splitted","match","parameterize","incoming","option","w","h","top","left","center","middle","right","bottom","crop","blur","gamma","red","green","blue","grayscale","encode","encodeURIComponent","serialize","prefix","parts","imageHosts","config","host","extractHost","url","String","replace","crushable","indexOf","uncrush","crush","uncrushed"],"mappings":"AAAA;;AACA;;;;AAIA;;;;SAIgBA,MAAMC;AACpB,QAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN;AACD;AACD;;ACZA;;;;;AAMA,AAEA;;;;;AAIA,SAAgBE,QAAQC;AACtB,SAAO,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA1C,IAAkDA,KAAK,KAAK,KAAnE;AACD;AAED;;;;;;AAKA,SAAgBC,YACdD,OACAE;MAAAA;AAAAA,IAAAA,eAAwB;;;AAExB,SAAO,OAAOF,KAAP,KAAiB,WAAjB,GAA+BE,YAA/B,GAA8C,CAAC,CAACF,KAAvD;AACD;AAED;;;;;;AAKA,SAAgBG,WAAWH,OAAYE;MAAAA;AAAAA,IAAAA,eAAuB;;;AAC5D,MAAIE,QAAQ,GAAGJ,KAAf;;AAGA,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBI,IAAAA,QAAQ,GAAGF,YAAY,IAAI,CAA3B;AACD;;AAED,MAAIH,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBI,IAAAA,QAAQ,GAAGF,YAAX;AACD;;;AAGDE,EAAAA,QAAQ,GAAGC,MAAM,CAACD,QAAD,CAAjB;;AAEA,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,QAAhB,CAAL,EAAgC;AAC9BR,IAAAA,KAAK,QAAKI,KAAL,+BAAL;AACAI,IAAAA,QAAQ,GAAGF,YAAX;AACD;;AAED,SAAOE,QAAP;AACD;;ACtDD;;;;AAKA,AAGA;;;;AAGA,IAAMG,cAAc,GAAG;AACrBC,EAAAA,GAAG,EAAE,IADgB;AAErBC,EAAAA,OAAO,EAAE,IAFY;AAGrBC,EAAAA,OAAO,EAAE;AAHY,CAAvB;AAMA;;;;;;;AAMA,SAAgBC,WACdC;MAAAA;AAAAA,IAAAA,UAAuB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;;;AAEvB,SAAOC,MAAM,CAACC,MAAP,CACL,EADK,EAELd,WAAW,CAACW,OAAO,CAACC,QAAT,EAAmB,IAAnB,CAAX,GAAsCN,cAAtC,GAAuD,EAFlD,EAGLK,OAHK,CAAP;AAKD;;AC/BD;;;;AAKA,SAiBgBI,MAAMC;AACpB,SAAOA,WAAW,CAACC,WAAZ,GAA0B,GAA1B,GAAgC,SAAvC;AACD;AAED,SAAgBC,OAAOF;AACrB,MAAMG,IAAI,GAAG,EAAb;AAEAA,EAAAA,IAAI,CAACC,IAAL,CAAUlB,UAAU,CAACc,WAAW,CAACK,KAAb,CAApB;AACAF,EAAAA,IAAI,CAACC,IAAL,CAAUlB,UAAU,CAACc,WAAW,CAACM,MAAb,CAApB;;AAEA,MACET,MAAM,CAACU,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,WAArC,EAAkD,GAAlD,KACAH,MAAM,CAACU,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,WAArC,EAAkD,GAAlD,CAFF,EAGE;AACAG,IAAAA,IAAI,CAACC,IAAL,CAAUlB,UAAU,CAACc,WAAW,CAACU,CAAb,CAApB;AACAP,IAAAA,IAAI,CAACC,IAAL,CAAUlB,UAAU,CAACc,WAAW,CAACW,CAAb,CAApB;AACD;;AAED,SAAOR,IAAI,CAACS,IAAL,CAAU,GAAV,CAAP;AACD;;ACzCD;;;;AAKA,SAGgBrB,IAAII;AAClB,MAAMkB,MAAM,GAAQ,EAApB;;AAEA,MAAIlB,OAAO,CAACJ,GAAR,IAAeI,OAAO,CAACU,KAAvB,IAAgCV,OAAO,CAACW,MAA5C,EAAoD;AAClDT,IAAAA,MAAM,CAACC,MAAP,CAAce,MAAd,EAAsB;AACpBC,MAAAA,EAAE,EAAE,GADgB;AAEpBC,MAAAA,CAAC,EAAK7B,UAAU,CAACS,OAAO,CAACU,KAAT,CAAf,SAAkCnB,UAAU,CAACS,OAAO,CAACW,MAAT;AAFzB,KAAtB,EADkD;;AAOlD,QAAI,CAACX,OAAO,CAACqB,KAAb,EAAoBH,MAAM,CAACI,OAAP,GAAiB,GAAjB;AACrB;;AAED,SAAOJ,MAAP;AACD;;ACtBD;;;;AAKA,SAGgBrB,QAAQG;AACtB,MAAMkB,MAAM,GAAG,EAAf;AACA,MAAM9B,KAAK,GAAQY,OAAO,CAACH,OAA3B;;AAEA,MAAIT,KAAJ,EAAW;AACTc,IAAAA,MAAM,CAACC,MAAP,CAAce,MAAd,EAAsB;AACpBK,MAAAA,CAAC,EAAE;AACDC,QAAAA,CAAC,EAAEjC,UAAU,CAACH,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEqC,MAAR,EAAgB,CAAhB,CADZ;AAEDC,QAAAA,CAAC,EAAEnC,UAAU,CAACH,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEuC,KAAR,EAAe,GAAf,CAFZ;AAGDC,QAAAA,CAAC,EAAErC,UAAU,CAACH,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEyC,MAAR,EAAgB,GAAhB,CAHZ;AAIDC,QAAAA,CAAC,EAAEvC,UAAU,CAACH,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAE2C,SAAR,EAAmB,IAAnB;AAJZ;AADiB,KAAtB;AAQD;;AAED,SAAOb,MAAP;AACD;;SCPec,YAAYC;AAC1B,MAAMC,YAAY,GAAG,EAArB;AAEAhC,EAAAA,MAAM,CAACiC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAACC,GAAD;AAC1B;AACA,QAAMjD,KAAK,GAAQ6C,MAAM,CAACI,GAAD,CAAzB;AACA,QAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,eAAV,CAAjB;;AAEA,QAAID,QAAJ,EAAc;AACZ;AACAJ,MAAAA,YAAY,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAZ,GAA4BJ,YAAY,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAZ,IAA6B,EAAzD,CAFY;;AAIZJ,MAAAA,YAAY,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAZ,CAA0BA,QAAQ,CAAC,CAAD,CAAlC,IAAyClD,KAAzC;AACD,KALD,MAKO;AACL;AACA8C,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBjD,KAApB;AACD;AACF,GAdD;AAgBA,SAAO8C,YAAP;AACD;;ACrCD;;;AAIA,SAOgBM,aAAaC;AAC3B,MAAMvB,MAAM,GAAQ,EAApB;AACA,MAAMlB,OAAO,GAAQgC,WAAW,CAACS,QAAD,CAAhC;AAEAvC,EAAAA,MAAM,CAACiC,IAAP,CAAYnC,OAAZ,EAAqBoC,OAArB,CAA6B,UAAAM,MAAM;AACjC,QAAMtD,KAAK,GAAQY,OAAO,CAAC0C,MAAD,CAA1B;;AAEA,YAAQA,MAAR;AACE,WAAK,OAAL;AACExB,QAAAA,MAAM,CAACyB,CAAP,GAAWpD,UAAU,CAACH,KAAD,CAArB;AACA;;AAEF,WAAK,QAAL;AACE8B,QAAAA,MAAM,CAAC0B,CAAP,GAAWrD,UAAU,CAACH,KAAD,CAArB;AACA;;AAEF,WAAK,SAAL;AACE8B,QAAAA,MAAM,CAACpB,OAAP,GAAiBP,UAAU,CAACH,KAAD,CAA3B;AACA;;AAEF,WAAK,KAAL;AACEc,QAAAA,MAAM,CAACC,MAAP,CAAce,MAAd,EAAsBtB,GAAG,CAACI,OAAD,CAAzB;AACA;;AAEF,WAAK,OAAL;AACEkB,QAAAA,MAAM,CAACI,OAAP;AAEE;AACEuB,UAAAA,GAAG,EAAE,GADP;AAEEC,UAAAA,IAAI,EAAE,GAFR;AAGEC,UAAAA,MAAM,EAAE,GAHV;AAIEC,UAAAA,MAAM,EAAE,GAJV;AAKEC,UAAAA,KAAK,EAAE,GALT;AAMEC,UAAAA,MAAM,EAAE;AANV,UAOE9D,KAPF,KAOY,GATd;AAUA;;AAEF,WAAK,MAAL;AACE8B,QAAAA,MAAM,CAACiC,KAAA,CAAW/D,KAAX,CAAD,CAAN,GAA4B+D,MAAA,CAAY/D,KAAZ,CAA5B;AACA;;AAEF,WAAK,MAAL;AACE8B,QAAAA,MAAM,CAACkC,IAAP,GACE,OAAOhE,KAAP,KAAiB,QAAjB,GACOG,UAAU,CAACH,KAAK,CAACqC,MAAP,CADjB,SACmClC,UAAU,CAACH,KAAK,CAACuC,KAAP,EAAc,CAAd,CAD7C,UAESpC,UAAU,CAACH,KAAD,EAAQ,CAAR,CAHrB;AAIA;;AAEF,WAAK,OAAL;AACE8B,QAAAA,MAAM,CAACmC,KAAP,GACE,OAAOjE,KAAP,KAAiB,QAAjB,GACOG,UAAU,CAACH,KAAK,CAACkE,GAAP,EAAY,CAAZ,CADjB,SACmC/D,UAAU,CACvCH,KAAK,CAACmE,KADiC,EAEvC,CAFuC,CAD7C,SAIShE,UAAU,CAACH,KAAK,CAACoE,IAAP,EAAa,CAAb,CAJnB,GAKIjE,UAAU,CAACH,KAAD,EAAQ,CAAR,CANhB;AAOA;;AAEF,WAAK,WAAL;AACA,WAAK,WAAL;AACE8B,QAAAA,MAAM,CAACuC,SAAP,GAAmBlE,UAAU,CAACH,KAAD,EAAQ,CAAR,CAAV,GAAuB,GAA1C;AACA;;AAEF,WAAK,SAAL;AACEc,QAAAA,MAAM,CAACC,MAAP,CAAce,MAAd,EAAsBrB,OAAO,CAACG,OAAD,CAA7B;AACA;;AAEF,WAAK,OAAL;AACEE,QAAAA,MAAM,CAACC,MAAP,CAAce,MAAd,EAAsB9B,KAAK,IAAI,EAA/B;AACA;AA9DJ;AAmED,GAtED;AAwEA,SAAO8B,MAAP;AACD;;ACxFD;;;;AAIA;;;AAGA,SAAgBwC,OAAOtE;AACrB,SAAOuE,kBAAkB,CAACvE,KAAD,CAAzB;AACD;AAED;;;;AAGA,SAAgBwE,UACd1C,QACA2C;AAEA,MAAMC,KAAK,GAAe,EAA1B;AAEA5D,EAAAA,MAAM,CAACiC,IAAP,CAAYjB,MAAZ,EAAoBkB,OAApB,CAA4B,UAAAC,GAAG;AAC7B,QAAMjD,KAAK,GAAG8B,MAAM,CAACmB,GAAD,CAApB;AACA,QAAMjC,KAAK,GAAGyD,MAAM,GAAMA,MAAN,SAAgBxB,GAAhB,SAAyBA,GAA7C;AAEAyB,IAAAA,KAAK,CAACrD,IAAN,CACE,OAAOrB,KAAP,KAAiB,QAAjB,GACIwE,SAAS,CAACxE,KAAD,EAAQgB,KAAR,CADb,GAEOsD,MAAM,CAACtD,KAAD,CAFb,SAEwBsD,MAAM,CAACtE,KAAD,CAHhC;AAKD,GATD;AAWA,SAAO0E,KAAK,CAAC7C,IAAN,CAAW,GAAX,CAAP;AACD;;AChCD;;;;;AAMA,AAKA;;;;;AAIA,IAAa8C,UAAU,GAAG,CACxB,mBADwB,EAExB,oBAFwB,EAGxB,aAHwB,EAIxB,qBAJwB,EAKxB,gBALwB,EAMxB,eANwB,EAOxB,sBAPwB,EAQxB,eARwB,EASxB,eATwB,EAUxB,eAVwB,EAWxB,eAXwB,EAYxB,eAZwB,EAaxB,eAbwB,EAcxB,kBAdwB,EAexB,4BAfwB,EAgBxB,iBAhBwB,EAiBxB,iBAjBwB,EAkBxB,kCAlBwB,EAmBxB,yBAnBwB,EAoBxB,yBApBwB,EAqBxB,yBArBwB,EAsBxB,iCAtBwB,EAuBxB,8BAvBwB,EAwBxB,iBAxBwB,EAyBxB,yBAzBwB,EA0BxB,iBA1BwB,EA2BxB,yBA3BwB,EA4BxB,mBA5BwB,EA6BxB,aA7BwB,CAAnB;AAgCP;;;;;AAIA,IAAaC,MAAM,GAAG;AACpB/D,EAAAA,QAAQ,EAAE,IADU;AAEpBgE,EAAAA,IAAI,EAAE;AAFc,CAAf;AAKP;;;;;;;AAMA,SAASC,WAAT,CAAqBC,GAArB;AACE,SAAOC,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,iBAApB,EAAuC,IAAvC,CAAP;AACD;AAED;;;;;;;AAKA,SAAgBC,UAAUH;AACxB,SAAOJ,UAAU,CAACQ,OAAX,CAAmBL,WAAW,CAACC,GAAD,CAA9B,MAAyC,CAAC,CAAjD;AACD;AAED;;;;;;;AAMA,SAAgBK,QAAQL;AACtB,MAAML,KAAK,GAAGM,MAAM,CAACD,GAAD,CAAN,CAAY5B,KAAZ,CACZ,qFADY,CAAd;;AAKA,MAAIuB,KAAJ,EAAW;AACT,WAAOU,OAAO,CAAIV,KAAK,CAAC,CAAD,CAAT,UAAiBA,KAAK,CAAC,CAAD,CAAtB,CAAd;AACD;;AAED,SAAOK,GAAP;AACD;AAED;;;;;;;;;;;;;AAYA,SAAgBM,MAAMN,KAAanE;MAAAA;AAAAA,IAAAA,UAAuB;;;AACxD;AACA,MAAM0E,SAAS,GAAGF,OAAO,CAACL,GAAD,CAAzB;;AAGA,MAAI,CAACG,SAAS,CAACI,SAAD,CAAd,EAA2B;AACzB,WAAOA,SAAP;AACD;;AAED,MAAMxD,MAAM,GAAG0C,SAAS,CACtBpB,YAAY,CACVzC,UAAU,CAACG,MAAM,CAACC,MAAP,CAAc;AAAEF,IAAAA,QAAQ,EAAE+D,MAAM,CAAC/D;AAAnB,GAAd,EAA6CD,OAA7C,CAAD,CADA,CADU,CAAxB;AAMA,SAAUgE,MAAM,CAACC,IAAjB,WAA2BS,SAAS,CAACL,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,CAA3B,IACEnD,MAAM,SAAOA,MAAP,GAAkB,EAD1B;AAGD;;;;;"}